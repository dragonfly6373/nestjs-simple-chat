--
-- PostgreSQL database dump
-- docker exec -t your-db-container pg_dumpall -c -U postgres > dump_`date +%Y-%m-%d"_"%H_%M_%S`.sql
-- cat postgres.dump | docker exec -i demo-chat psql -U postgres -d demo-chat
--

-- Dumped from database version 16.1 (Debian 16.1-1.pgdg120+1)
-- Dumped by pg_dump version 16.1 (Debian 16.1-1.pgdg120+1)

SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;

SET default_tablespace = '';

SET default_table_access_method = heap;

--
-- Name: room; Type: TABLE; Schema: public; Owner: postgres
-- status: 1 - active | 0 - inactive
--

CREATE TABLE IF NOT EXISTS public.room (
    id integer NOT NULL,
    name character varying,
    status smallint DEFAULT 1,
    created_by integer,
    updated_date timestamp DEFAULT current_timestamp,
    created_date timestamp DEFAULT current_timestamp,
    CONSTRAINT pk_room PRIMARY KEY(id)
);


ALTER TABLE public.room OWNER TO postgres;

--
-- Name: room_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public.room ALTER COLUMN id ADD GENERATED ALWAYS AS IDENTITY (
    SEQUENCE NAME public.room_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: user; Type: TABLE; Schema: public; Owner: postgres
-- status: 1 - active | 0 - inactive
--

CREATE TABLE IF NOT EXISTS public."user" (
    id integer NOT NULL,
    login_id character varying NOT NULL,
    account_type integer,
    status smallint DEFAULT 1,
    created_date timestamp DEFAULT current_timestamp,
    updated_date timestamp DEFAULT current_timestamp,
    login_password character varying,
    display_name character varying,
    CONSTRAINT pk_user PRIMARY KEY(id)
);


ALTER TABLE public."user" OWNER TO postgres;

--
-- Name: user_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public."user" ALTER COLUMN id ADD GENERATED ALWAYS AS IDENTITY (
    SEQUENCE NAME public.user_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

--
-- Name: join_room; Type: TABLE; Schema: public; Owner: postgres
-- status: 0 - wait for approved | 1 - approved | -1 - rejected
--

CREATE TABLE IF NOT EXISTS public.join_room (
    id integer NOT NULL,
    room_id integer NOT NULL,
    user_id integer NOT NULL,
    status smallint DEFAULT 0,
    approved_by integer,
    created_date timestamp DEFAULT current_timestamp,
    CONSTRAINT pk_room_user PRIMARY KEY(room_id, user_id),
    CONSTRAINT fk_room FOREIGN KEY (room_id) REFERENCES public.room(id),
    CONSTRAINT fk_user FOREIGN KEY (user_id) REFERENCES public.user(id)
);

ALTER TABLE public.join_room OWNER TO postgres;

--
-- Name: user_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public."join_room" ALTER COLUMN id ADD GENERATED ALWAYS AS IDENTITY (
    SEQUENCE NAME public.join_room_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

--
-- Name: chat_message; Type: TABLE; Schema: public; Owner: postgres
-- status: 1 - sent | -1 deleted
--

CREATE TABLE IF NOT EXISTS public.chat_message (
    id integer PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    room_id integer,
    message_type smallint,
    content character varying,
    created_by integer,
    created_date timestamp DEFAULT current_timestamp,
    status smallint DEFAULT 0
);

ALTER TABLE public.chat_message OWNER TO postgres;

--
-- Name: COLUMN chat_message.message_type; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.chat_message.message_type IS 'message|media|';

--
-- Name: user_rooms_view; Type: VIEW; Schema: public; Owner: postgres
--

CREATE OR REPLACE VIEW public.user_rooms_view AS
    SELECT join_room.user_id, room.*
    FROM public.join_room
    LEFT JOIN public.room
    ON join_room.room_id = room.id;

ALTER VIEW public.user_rooms_view OWNER TO postgres;

--
-- Name: room_users_view; Type: VIEW; Schema: public; Owner: postgres
--

CREATE OR REPLACE VIEW public.room_users_view AS
    SELECT join_room.room_id, u.*
    FROM public.join_room
    LEFT JOIN public.user AS u
    ON join_room.user_id = u.id;

ALTER VIEW public.room_users_view OWNER TO postgres;

--
-- PostgreSQL database dump complete
--

